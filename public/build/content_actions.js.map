{"version":3,"file":"content_actions.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/lib/apis/proxy.js","../../src/lib/apis/bookmarks.js","../../src/workspace.js","../../src/lib/stores.js","../../src/lib/send.js","../../src/lib/actions.js","../../src/lib/content.js","../../src/content_actions.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.53.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { get } from 'svelte/store';\n\nexport const print = new Proxy(() => {}, {\n  get(target, name) {\n    return (args) => {\n      let _name = name.toUpperCase().split('_');\n      console.log(`[${_name[0]}][${_name.slice(1).join('_')}]`, args);\n      return args;\n    }\n  }\n});\n\nexport const notify = new Proxy(() => {}, {\n  // TODO set alert level filtering based on _name[0]\n  get(target, name) {\n    let _name = name.toUpperCase().split('_');\n    console.log(\"NOTIFYING\", name, target);\n    return (args) => {\n      const state = _name[0];\n      return browser.notifications.create({\n        type: \"basic\",\n        title: _name[0],\n        message: _name.slice(1).join('_'),\n        // buttons: params.buttons || []\n      })\n      .catch(print.failure_notify)\n      .finally(() => args);\n    }\n  }\n});\n\n//.then(register.success_last_message)\nexport const register = new Proxy(() => {}, {\n  get(target, name) {\n    let _name = name.toUpperCase().split('_');\n    return (args) => {\n      console.log(`[REGISTER][${_name[0]}][${_name.slice(1).join('_')}]`, args);\n      return args;\n    }\n  }\n});\n\n// TODO this might be a router for complex data transformers\n// export const include = new Proxy(() => {}, {\n//   get(target, name) {\n//     return (args) => {\n//       console.log(`[INCLUDE][${name}]`, args);\n//       if (name == 'tabs') {\n\n//       }\n//       return {\n//         ...args,\n\n//       };\n//     }\n//   }\n// });\n","\nimport * as proxy from \"./proxy.js\";\nimport * as windows from \"./windows.js\";\n\n\nexport const create = (tabs) => {\n    return Promise.all(\n        tabs.map((tab) => {\n            return Promise.resolve(tab)\n                .then(_tab => ({\n                    parentId: \"monitoring\",\n                    title: tab.title,\n                    url: tab.url,\n                }))\n                .then(browser.bookmarks.create)\n                .catch(proxy.print.failure_create_tab_bookmark)\n        })\n    );\n}\n\nexport const update = (tabId, changeInfo, tab) => {\n    if (changeInfo.status === \"complete\") {\n        return Promise.resolve(tab)\n            .then(_tab => ({url:tab.url, title: tab.title}))\n            .then(_meta => browser.bookmarks.update(\"\", _meta))\n            .catch(proxy.print.failure_update_monitoring_bookmark)\n\n    }\n}\n\nexport const createMonitoringBookmarks = (tab) => {\n    return Promise.resolve(tab)\n        .then((_tab) => ({\n            parentId: \"monitoring\", // FIXME make arg?\n            title: tab.title,\n            url: tab.url,\n            windowId: tab.windowId,\n        }))\n        .then(browser.bookmarks.create)\n        .catch(proxy.print.failure_create_monitoring_bookmarks)\n}\n\nexport const removeBookmarksOnTabRemoval = (tabId) => {\n    browser.bookmarks.remove(tabId);\n}\n\n// Promise.resolve(\"monitoring\")\n//     .then(windows.getTabsByWindowValue)\n//     .then(create)\n//     .then(() => {\n//         browser.tabs.onUpdated.addListener(update);\n//         browser.tabs.onCreated.addListener(createBookmarksOnTabCreation);\n//         browser.tabs.onRemoved.addListener(removeBookmarksOnTabRemoval);\n//     })\n//     .catch(proxy.print.failure_remove_bookmarks_on_tab_removal);\n\n// --------\n\nexport const sendBookmarks = () => {\n  return Promise.resolve(args)\n    .catch(proxy.print.failure_send_bookmarks)\n};\n\n\nexport const addBookmarkFromTab = (args) => {\n\n}\n\nexport const add = (args) => {\n  return Promise.resolve(args)\n    // .then((_args) => {\n\n    // })\n    .then((_args) => ({\n      tags: _args.tags,\n      title: args.title,\n\n    }))\n    .then(browser.bookmarks.create)\n    .catch(proxy.print.failure_send_bookmarks)\n};\n\nexport const renderBranch = (nodes) => {\n  return nodes.map((node) => _renderBranch(node, \".\"));\n}\n\nexport const _renderBranch = (node, _path) => {\n  console.log(\"rendering node -> \", _path, node)\n  if (node.type === \"folder\") {\n    _path = `${_path}/${node.title}`\n  }\n  if (node.children) {\n    return node.children.map((_node) => {\n      return _renderBranch(node, `${_path}.${node.title}`)\n    });\n  } else {\n    return {\n      path: _path,\n      label: node.title,\n      uri: node.url,\n      index: node.index,\n      type: node.type,\n      addedAt: node.dateAdded,\n      modifiedAt: node.dateGroupModified,\n    };\n  }\n}\n\nexport const renderNode = (_path, node) => {\n  return {\n    path: _path,\n    label: node.title,\n    uri: node.url,\n    index: node.index,\n    type: node.type,\n    addedAt: node.dateAdded,\n    modifiedAt: node.dateGroupModified,\n  }\n}\n\nconst materializeLeafNodes = (node) => {\n  let nodes = [];\n  let queue = {};\n  while (queue.length > 0) {\n    // node =\n  }\n  return nodes;\n}\n\nconst recurseNodes = (node, path) => {\n  let _children = node.children;\n  if (!_children)\n    return [renderNode(path, node)];\n\n  let nodes = [];\n  for (let x = 0; x < _children.length; x++) {\n    let _node = _children[x];\n    let _path = `${path}/${_node.title}`;\n    nodes = nodes.concat(recurseNodes(_node, _path));\n  }\n  return nodes;\n}\n\nexport const extract = (args) => {\n  return browser.bookmarks.getTree()\n    .then(node => recurseNodes(node[0], '.'))\n    .catch(proxy.print.failure_extract_bookmarks)\n}\n\nexport const getAll = (args) => {\n  return Promise.resolve(args)\n    .then(extract)\n    .then(proxy.print.status_bookmarks_get_tree)\n    .catch(proxy.print.failure_get_tree);\n}\n\nexport const search = (args) => {}\n\nexport const bookmarkApi = (() => {\n  if (typeof browser !== \"undefined\" && browser.bookmarks) {\n    return browser.bookmarks;\n  } else if (typeof chrome !== \"undefined\" && chrome.bookmarks) {\n    return chrome.bookmarks;\n  } else {\n    throw new Error(\"Bookmark API not supported\");\n  }\n})();\n\nexport const apis = {\n  bookmarks: bookmarkApi\n}\n\nfunction setBookmarkAnnotation(id, annotation) {\n  return Promise.resolve([id, annotation])\n    .then(([id, annotation]) => apis.bookmarks.update(id, { meta: { annotation } }))\n    .catch(proxy.print.failure);\n}\n\nfunction getBookmarkAnnotations(id) {\n  const fallbackAnnotations = [];\n\n  return Promise.resolve(id)\n    .then((id) => apis.bookmarks.get(id))\n    .then((nodes) => nodes[0]?.meta?.annotations ?? fallbackAnnotations)\n    .catch(proxy.print.failure);\n}\n\n// // Example usage:\n// setBookmarkAnnotation(\"bookmark-id-1\", \"My annotation\")\n//   .then(() => getBookmarkAnnotations(\"bookmark-id-1\"))\n//   .then((annotations) => console.log(annotations))\n//   .catch(proxy.print.failure_bookmark_annotation_set);\n\n\nexport const fetchById = (job) => {\n  return browser.bookmarks.get(job.id)\n    .then((bookmarks) => {\n      if (!Array.isArray(bookmarks) || bookmarks.length < 1) {\n        throw new Error(`Bookmark with ID ${job.id} not found`);\n      }\n      return bookmarks[0];\n    })\n    .catch(proxy.print.failure_fetch_bookmark_by_id);\n}\n\nexport const fetchAnnotations = (bookmark) => {\n  return browser.bookmarks.getAnnotation(bookmark.id, META_ANNOTATION_KEY)\n    .then((value) => {\n      if (!value) {\n        throw new Error(`Meta annotation for bookmark ${bookmark.id} not found`);\n      }\n      return value;\n    })\n    .catch(proxy.print.failure_fetch_annotations);\n}\n\nexport const importFromStash = (args) => {\n  return browser.storage.local.get(\"stash\")\n    .then((result) => result.stash)\n    .then((stash) => {\n      return Object.entries(stash).map((entry) => {\n        /*\n          1. iterate through node walker\n          2. each node with url and title\n          3. throw into a bucket hydrated from node\n          4. save items into bookmarks within a stash folder\n        */\n      });\n    })\n    .catch(proxy.print.failure_import_from_stash);\n};\n\n// ---\n\nexport const createBookmarkForTag = _tag => {\n  return Promise.resolve()\n    .then(() => {\n        return browser.bookmarks.search({title: \"example\"});\n    })\n    .then((bookmarks) => {\n        return browser.bookmarks.update(bookmarks[0].id, {\n            title: \"example\",\n            tags: [\"example-tag\"]\n        });\n    })\n    .catch(proxy.print.failure_import_from_stash);\n\n}\n\nexport const createBookmarkForResearchNote = _type => {\n  return Promise.resolve({\n      title: \"example research\",\n      url: \"https://example.com\",\n      parentId: \"research_folder\",\n      index: 0,\n      // Add a custom property to store research notes\n      research_notes: \"# Research Notes\\n1. **Source**: [Example Article](https://example.com)\\n2. **Key Takeaways**:\\n- Point 1\\n- Point 2\\n3. **Comments**:\\n- Example comment 1\\n- Example comment 2\"\n  })\n  .then(browser.bookmarks.create)\n  .catch(proxy.print.failure_import_from_stash);\n}\n","/*\n3rd order item for managing workspace objects\n*/\n\n\n// WORKSPACE\n\nexport const workspaceConfig = {\n  loadedAt: new Date(),\n  version: '0.0.12-prealpha',\n  logs: {\n    level: \"debug\",\n    target: \"local\",\n    quiet: {\n      keywords: [''],\n      prefix: ['status', 'success'],\n      suffix: ['mounted'],\n    },\n  },\n  notify: {\n    level: \"error\",\n    target: \"remote\",\n    quiet: {\n      keywords: [''],\n      prefix: ['status', 'success'],\n      suffix: ['mounted'],\n    },\n  },\n  hosts: {\n    local: {\n      name: \"localhost\",\n      active: true,\n      default: true,\n      uri: \"http://localhost:3000\",\n      search: \"/api/search\",\n    },\n    remote: {\n      name: \"remote-1\",\n      active: false,\n      default: false,\n      uri: \"http://192.168.99.156:3000\",\n      search: \"/api/search\",\n    },\n  },\n  playlist: {\n    mine: {\n      notes: {}, // browser.tabs.getHighlighted(tab.id), textfield input (markdown editor)\n      items: {},\n      tags: [], // all tags found/used,\n    },\n  },\n  options: {\n    filterby: {\n      default: \"this\",\n      handleFailure: \"stop.critical\" // stop proxy actions for actions or ongoing panel monitoring. like an interrupt\n    },\n\n  },\n  playlistHistory: [],\n  recentlySaved: [],\n  todo: {},\n  journal: [],\n\n};\n\n","// 2nd order, +complexity dependent @../config/parameters\n\n/*\nneed a 'view' window of current open stuff to maintain the place\nof the user within each data set\na kind of cursor which is different or can be synced across\ndifferent data types and representations, eg pdf viewed vs file list vs image gallery\n\ncan we chain readable/writable?\nso readable(value) internally updates\nthen writable calls readable's values for those datasets\n*/\n\nimport { writable } from 'svelte/store';\n\nimport * as network from \"./network.js\";\n\nimport * as bookmarks from \"./apis/bookmarks.js\";\nimport * as proxy from \"./apis/proxy.js\";\nimport * as tabs from \"./apis/tabs.js\";\n\nimport { workspaceConfig } from \"../workspace.js\";\n\n// -----\n// Experiment: source abstraction\n/*\n- get_all\n- get_path\n- get_query\n- get_json_from_obj\n- get_uri_from_obj\n- structure: {\n  uri: \"file://, http://, bookmark://\",\n  parent: \"folder/subfolder\",\n\n}\n*/\n\n// export const _ = () => {};\n\nexport const getAllTree = () => {};\nexport const getAllFlat = () => {};\nexport const getAll = getAllTree;\n\nexport const setAtPath = (key, value) => {};\nexport const setJsonAtPath = (key, jsonValue) => {};\n\nexport const addToPath = (key, value) => {};\nexport const addChildToPath = (key, value) => {};\n\nexport const removeAtPath = () => {};\nexport const removeFromPath = () => {};\n\nexport const watchPath = (path) => monitorBookmarksAt(path);\n\n// -----\n\nexport const setupBookmarkListeners = (bookmarkTreeNodes) => {\n  // Register change listeners\n  browser.bookmarks.onCreated.addListener((id, bookmark) => {\n    console.log(\"Bookmark created:\", bookmark);\n  });\n\n  browser.bookmarks.onRemoved.addListener((id, removeInfo) => {\n    console.log(\"Bookmark removed:\", removeInfo);\n  });\n\n  browser.bookmarks.onChanged.addListener((id, changeInfo) => {\n    console.log(\"Bookmark changed:\", changeInfo);\n  });\n\n  return bookmarkTreeNodes;\n};\n\nexport const monitorBookmarksAt = (folderId) => {\n  return Promise.resolve(folderId)\n    .then(folderId => browser.bookmarks.getSubTree(\n      folderId,\n      setupBookmarkListeners\n    ))\n    .catch(proxy.print.failure_setup_subtree_listener);\n}\n\n// -----\n\nexport const localStorageFor = (name, otherwise={}) => {\n  return Promise.resolve(`${name}`)\n    .then(browser.storage.local.get)\n    .catch(print.failure_storage_for)\n};\n\nexport const bookmarksFor = (name, otherwise={}) => {\n  return Promise.resolve(name)\n    .then(bookmarks.search)\n    .catch(proxy.print.failure_bookmarks_for)\n};\n\nconst configWritable = writable(workspaceConfig);\nconst layoutItemsWritable = writable(bookmarksFor(\"layoutItems\", { items: [], add: [] }));\n\nexport const stores = {\n  config: configWritable,\n  layoutItems: layoutItemsWritable,\n};\n\n\nObject.entries(stores).forEach((entry) => {\n  let name = entry[0];\n  let store = entry[1];\n  store.subscribe((val) => {\n    if (val !== undefined && val !== \"undefined\") {\n      return Promise.resolve({ name: val })\n        .then(bookmarks.search)\n        .then(proxy.print.success_storage_bookmarks)\n        .catch(proxy.print.failure_storage_bookmarks);\n    }\n  });\n});\n\n// --- Approach for localStorage\n\n\n// export const stores = {\n//   config: configWritable,\n//   todo: todoWritable,\n//   actionHistory: actionHistoryWritable,\n//   eventLog: eventLogWritable,\n//   layoutItems: layoutItemsWritable,\n//   files: filesWritable,\n// };\n\n// const configWritable = writable(workspaceConfig); // localStorageFor(\"config\",\n// const actionHistoryWritable = writable(localStorageFor(\"actionHistory\", []));\n// const eventLogWritable = writable(localStorageFor(\"eventLog\", []));\n// const layoutItemsWritable = writable(localStorageFor(\"layoutItems\", { items: [], add: [] }));\n// const todoWritable = writable(localStorageFor(\"todo\", []));\n// const filesWritable = writable(localStorageFor(\"files\"));\n\n// export const localStorageFor = (name, otherwise={}) => {\n//   return Promise.resolve(`${name}`)\n//     .then(browser.storage.local.get)\n//     .catch(proxy.print.failure_storage_for)\n//     .then(_ => otherwise)\n// };\n\n// export const storageFor = (name, otherwise={}) => {\n//   return Promise.resolve(`${name}`)\n//     .then(browser.storage.local.get)\n//     .catch(proxy.print.failure_storage_for)\n//     .then(_ => otherwise)\n// };\n\n// Object.entries(stores).forEach((entry) => {\n//   let name = entry[0];\n//   let store = entry[1];\n//   store.subscribe((val) => {\n//     if (val !== undefined && val !== \"undefined\") {\n//       return Promise.resolve({ name: val })\n//         .then(proxy.print.status_storage)\n//         // .then(pruneMethods)\n//         .then(browser.storage.local.set)\n//         .catch(proxy.print.failure_status_store);\n//     }\n//   });\n// });\n\n\n\n// -- subscriptions\n\n// stores.layoutItems.subscribe(val => {\n//   console.log(\"[update] stores.layoutItems update\", val)\n// });\n\n// stores.config.subscribe((val) => {\n//   console.log(\"[update] stores.workspace update\", val);\n// });\n\n// stores.eventLog.subscribe((val) => {\n//   console.log(\"[update] stores.eventLog update\", val);\n//   // if (val && Object.keys(val).length > 0) {\n//   //   sendProfileUpdate('action', val);\n//   // }\n// });\n\n// stores.actionHistory.subscribe((val) => {\n//   console.log(\"[update] stores.actionHistory update\", val);\n// });\n\n\nexport { stores as default };\n","\nimport { print, notify, register } from \"./apis/proxy.js\";\nimport { _send, _fetch } from \"./network.js\";\nimport { getCurrentActive } from \"./apis/tabs.js\";\n\n// ------- Send to webpage content_inject.js\n\nexport const toContent = (args) => {\n  return Promise.resolve(args)\n    .then(print.status_send_to_content)\n    .then((data) => {\n      browser.tabs.sendMessage(data.tabId, data);\n      return {\n        ...data,\n        success: true\n      };\n    })\n    .then(notify.success)\n    .catch(print.failure_send_to_content);\n}\n\nexport const setDarkMode = (e) => {\n  return Promise.resolve(e)\n    .then((data) => ({ tabId: data.id, message:'set.darkMode' }))\n    .then(toContent)\n    .catch(print.failure_send_toggle_loop);\n}\n\nexport const toggleLoop = (e) => {\n  return Promise.resolve(e)\n    .then((data) => ({ tabId: data.tabId, message:'media.toggleLoop' }))\n    .then(toContent)\n    .catch(print.failure_send_toggle_loop);\n}\n\nexport const playPause = (e) => {\n  return Promise.resolve(e)\n    .then((data) => ({ tabId: data.tabId, message:'media.playPause' }))\n    .then(toContent)\n    .catch(print.failure_send_play_pause);\n};\n\nexport const restart = (e) => {\n  return Promise.resolve(e)\n    .then((data) => ({ tabId: data.tabId, message:'media.restart' }))\n    .then(toContent)\n    .catch(print.failure_send_restart);\n};\n\n// export const sendRuntimeMessage = async (params) => {\n//   return browser.runtime.sendMessage(params)\n//     .catch(print.failure);\n// };\n\nexport const sendTabMessage = (args) => {\n  return Promise.resolve(args) \n    .then(_args => _args.tabId)\n    .then(browser.tabs.sendMessage)\n    .catch(print.failure_send_tab_message);\n};\n\nexport const sendMessageToTabs = (tabs) => {\n  return Promise.all(tabs.map((tab) => {\n    return browser.tabs.sendMessage(\n      tab.id,\n      {greeting: \"Hi from background script\"}\n    )\n    .then(print.status_send_message_to_tabs_response)\n    .catch(print.failure_send_message_to_tabs_response)\n  }))\n}\n\nexport const addRuntimeMessageHook = (params) => {\n  return browser.runtime.onMessage.addListener(params.hook);\n};\n\n\n// attempt to fix the DataCloneError error,\n// where sendMessage of some kind includes\n// methods in an object, so they need to be pruned\nexport const pruneMethods = (value) => {\n  return Promise.resolve(value)\n    .then(JSON.stringify)\n    .then(JSON.parse)\n    .catch(proxy.print.failure_stores_prune_methods);\n}\n\nexport const sendRuntimeMessage = async (params) => {\n  return Promise.resolve(params)\n    .then(pruneMethods)\n    .then(browser.runtime.postMessage)\n    .catch(print.failure_send_runtime_message);\n};\n\nexport const toContentScript = async (params) => {\n  return Promise.resolve(params)\n    .then((_params) => ({\n      direction: _params.direction,\n      message: _params.message\n    }))\n    .then((args) => window.postMessage(args, \"*\"))\n    .catch(print.failure_send_to_content_script);\n}\n\n\n// ------- Send composites\n\nexport const sendTag = (params) => {\n  // TODO normalize params interface and validation of values\n  return Promise.resolve(params)\n    .then(_params => params && params.tagName ? params.tagName : '#tag_name')\n    .then((name) => document.querySelector(name))\n    // FIXME extract css styling into module that can be integrated\n    .then((button) => button.value)\n    .then((tagName) => {\n      return {\n        uri: \"api/analysis/tag\",\n        args: {\n          name: tagName\n        }\n      }\n    })\n    .then(_send)\n    .catch(print.failure_send_tag)\n}\n\nexport const sendLink = async (tagName) => {\n  return getCurrentActive()\n    .then(tabs => tabs[0])\n    .then((tab) => {\n      return {\n        uri: \"api/location/add\",\n        body: {\n          label: tab.title,\n          uri: tab.url,\n          tag: tagName\n        }\n      }\n    })\n    .then(_send)\n    .then(notify.success)\n    .catch(print.failure_send_link)\n  }\n\n\nexport const sendSidebar = (params) => {\n  // params is { tabId: 0, windowId: 0 } only\n  // neither gives global table, both gives rejection\n  return Promise.resolve(params)\n    .then(browser.sidbarAction.open)\n    .catch(print.failure_open_sidebar);\n}\n\nexport const getContexts = (results) => {\n  console.log(\"sending results\", results);\n  return Promise.resolve(results)\n    .then((_results) => {\n      return _results.map((result) => {\n        return Promise.resolve(result)\n          .then(_result => [result.tabId, {...result, message: \"find\"}])\n          .then(_result => browser.tabs.sendMessage(..._result))\n          .catch(print.failure_send_message_context)\n      })\n    })\n    .then(Promise.all)\n    .catch(print.failure_get_contexts);\n}\n","\n\nimport * as send from \"./send.js\";\nimport * as proxy from \"./apis/proxy.js\";\nimport * as network from \"./network.js\";\nimport * as tabs from \"./apis/tabs.js\";\n\n// ---------- Actions\n\n\n\n// -- system\n\nexport const unloadTabs = (tabs) => {\n  return Promise.resolve(tabs)\n    .then((tabs) => tabs.map((tab) => browser.tabs.update(tab.id, {\n      active: false,\n      discarded: true\n    })))\n    .then(Promise.all)\n    .catch(proxy.print.failure_unload_tabs)\n}\n// export const doUnloadTabs = (tabs) => {\n//   return Promise.resolve(tabs)\n//     .then(browser.tabs.discard)\n//     .catch(print.failure_unload_tabs)\n// }\n\nexport const reloadSystem = (args) => {\n  return Promise.resolve(args)\n    .then(browser.runtime.reload)\n    .catch(proxy.print.failure_do_reload_system);\n}\n\n\n// ---\n\nexport const updatePlaying = (store) => {\n  return browser.tabs.query({\n    audible: true\n  })\n  .then(reduce.tabs)\n  .then((tabs) => {\n    store.update((knownTabs) => {\n      return Object.values(\n        reducePlaying(tabs, // second\n          reducePlaying(knownTabs, {}) // first\n        )\n      );\n    })\n  }).catch(proxy.print.failure_update_playing);\n};\n\nexport const selectedCopy = async (e) => {\n  return tabs.getHighlighted()\n    .then(proxy.print.status_selected_copy)\n    .then((tabs) => {\n      return tabs.map((tab) => `${tab.title},${tab.url}`).join('\\n');\n    })\n    .then(updateClipboard)\n    .then(proxy.notify.success)\n    .catch(proxy.print.failure_selected_copy);\n}\n\nexport const downloadVideo = (params) => {\n  return tabs.getCurrentActive()\n    .then((tab) => ({\n      uri: \"api/action/download/video\",\n      body: {\n        uri: tab[0].url,\n      }\n    }))\n    .then(_send)\n    .then(proxy.notify.success)\n    .catch(proxy.print.failure_download_video);\n}\n\nexport const bringToFront = (e) => {\n  return Promise.resolve(e)\n    .then((_e) => e.detail ? e.detail : e)\n    .then(proxy.print.start_bring_to_front)\n    .then(tabs.setActive)\n    .then(windows.setWindowActive)\n    .then(proxy.print.success)\n    .catch(proxy.print.failure_bring_to_front);\n}\n\n\nexport const updateClipboard = (newClip) => {\n  return Promise.resolve(newClip)\n    .then(navigator.clipboard.writeText)\n    .catch(proxy.print.failure_update_clipboard);\n};\n\n\n// --- \n\nexport const applyDarkMode = (e) => {\n  return getCurrentActive()\n    .then(send.setDarkMode)\n    .then(proxy.print.success_apply_dark_mode)\n    .catch(proxy.print.failure_apply_dark_mode)\n}\n\n\n// -- event callbacks\n\n\nexport const _updateLog = (val) => {\n  const date = dateStringFromDate(new Date());\n  return Promise.resolve(val)\n    .then((_val) => ({\n      ...val,\n      at: Math.floor(Date.now() / 1000),\n      timestamp: date\n    }))\n    .then((_val) => {\n      stores.eventLog.update((n) => [...(n.length ? n : (n ? [n] : [])), _val])\n    })\n    .catch(proxy.print.failure__update_log);\n}\n\n\nexport const updateLog = (e) => {\n  return Promise.resolve(e)\n    .then((_e) => _e.detail)\n    .then(_updateLog)\n    .catch(proxy.print.failure_update_log)\n}\n\n// --- extractions\n\nexport const extractReaderText = (e) => {\n  // browser.runtime.onMessage.addListener(registerScript);\n  return tabs.getCurrentActive()\n    .then((_tabs) => {\n      return _tabs.filter((tab) => tab.isArticle)[0];\n    })\n    .then((tab) => {\n        !tab.isInReaderMode ? browser.tabs.toggleReaderMode() : false;\n        return tab.id;\n    })\n    .then((tabId) => ({\n      tabId: tabId,\n      message:'extractReaderText'\n    }))\n    .then(send.toContent)\n    .then(proxy.print.status_content_response_reader_text)\n    .then((pageData) => ({\n      uri: \"api/analysis/data\",\n      body: pageData,\n    }))\n    .then(network._send)\n    .catch(proxy.print.failure_extract_reader_text);\n}\n\n\n// -- playlist controls 1\n\n\nexport const startPlaylist = (name) => {\n  /*\n  1. get profile data\n  2. update profile data with playlist cursor\n  3. cursor entry for 'active package'\n  4. cursor location is url, and progress\n  5. cursor has a history\n  6. shows past played, duration, notes\n  7. cursor lookahead shows next item in playlist\n  8. cursor history is a collection of objects in key-value stores\n  9. suggestion functions based on next, and past history items\n  10. operations for the current playlist item, the current cursor location\n  11. location is by object, as location is over time and object resulting from action\n  */\n  return browser.storage.local.get('stash')\n    .then((_stash) => _stash.stash)\n    .then((data) => data[name])\n    .then((playlist) => {\n      return playlist.reduce((sum, item) => {\n        return sum[item.name]\n      }, {})\n    })\n    .then(start)\n    .catch(proxy.print.failure_start_playlist);\n}\n\n\n\nexport const restoreSession = async (_sessions) => {\n  return Promise.resolve(_sessions)\n    .then((sessions) => {\n      if (!sessions || !sessions.length) {\n        return [];\n      }\n      return sessions;\n    })\n    .then((sessions) => {\n      sessions.forEach((session) => {\n        if (session.tab) {\n          browser.sessions.restore(session.tab.sessionId)\n            .catch(proxy.print.failure_restore_tab);\n        } else {\n          browser.sessions.restore(session.window.sessionId)\n            .catch(proxy.print.failure_restore_window);\n        }\n      })\n      return sessions;\n    })\n    .catch(proxy.print.failure_restore_session);\n}\n\n// FIXME experimental processing chain\nexport const enrichItem = (item) => {\n  return Promise.resolve(item)\n    // .then(addActiveWindowId)\n    // .then(addActiveTabId)\n    .catch(proxy.print.failure_enrich_item);\n}\n","\n\nimport * as proxy from \"./apis/proxy.js\";\nimport * as contextMenu from './apis/context_menu.js';\n\n\n// ------- Register content script\n\nexport const registerScript = (hosts) => {\n  return Promise.resolve({\n      matches: [\"<all_urls>\"],\n      js: [{file: \"build/content_actions.js\"}],\n      runAt: \"document_idle\"\n    })\n    .then(browser.contentScripts.register)\n    .catch(proxy.print.failure_content_scripts_register);\n}\n\nexport const _unregisterScript = (subPointer) => {\n  return subPointer.unregister();\n}\n\nexport const _registerScript = (message) => {\n  let hosts = message.hosts;\n  let code = message.code;\n\n  return browser.contentScripts.register({\n    matches: hosts,\n    js: [{code}],\n    runAt: \"document_idle\"\n  });\n}\n\n// ------ Content scripts\n\nexport const elementHexMap = {\n  \"body\": [\"#1a2028\", \"#242b34\"],\n  \"div\": [\"#1a2028\", \"#242b34\"],\n  \"header\": [\"#61ba86\", \"#1e2a34\"],\n  \"nav\": [\"#a2b0c7\", \"#242b34\"],\n  \"main\": [\"#1a2028\", \"#242b34\"],\n  \"section\": [\"#1a2028\", \"#242b34\"],\n  \"article\": [\"#1a2028\", \"#242b34\"],\n  \"aside\": [\"#b5c2d9\", \"#242b34\"],\n  \"footer\": [\"#4cb2ff\", \"#1e2a34\"],\n  \"h1\": [\"#61ba86\", \"#242b34\"],\n  \"h2\": [\"#a2b0c7\", \"#242b34\"],\n  \"h3\": [\"#b5c2d9\", \"#242b34\"],\n  \"h4\": [\"#b4bcde\", \"#242b34\"],\n  \"h5\": [\"#4cb2ff\", \"#242b34\"],\n  \"h6\": [\"#95b6f5\", \"#242b34\"],\n  \"p\": [\"#b5c2d9\", \"#242b34\"],\n  \"a\": [\"#4cb2ff\", \"#242b34\"],\n  \"button\": [\"#61ba86\", \"#242b34\"],\n  \"input\": [\"#293340\", \"#242b34\"],\n  \"textarea\": [\"#293340\", \"#242b34\"],\n  \"select\": [\"#293340\", \"#242b34\"],\n  \"table\": [\"#1a2028\", \"#242b34\"],\n  \"tr\": [\"#1a2028\", \"#242b34\"],\n  \"td\": [\"#b5c2d9\", \"#242b34\"],\n  \"th\": [\"#61ba86\", \"#242b34\"],\n  \"ul\": [\"#1a2028\", \"#242b34\"],\n  \"ol\": [\"#1a2028\", \"#242b34\"],\n  \"li\": [\"#b5c2d9\", \"#1a2028\"],\n  \"code\": [\"#b5c2d9\", \"#1a2028\"],\n  \"pre\": [\"#363f4e\", \"#1a2028\"],\n};\n\nexport const applyDarkMode = (schema) => {\n  return Promise.resolve(schema)\n    .then((colorSchema) => {\n      const elements = document.querySelectorAll('*');\n\n      // Loop through all elements and apply the color specified in elementHexMap\n      elements.forEach(element => {\n        const elementName = element.tagName.toLowerCase();\n        if (elementHexMap[elementName]) {\n          element.style.color = elementHexMap[elementName][0];\n          element.style.backgroundColor = elementHexMap[elementName][1];\n        }\n      });\n    })\n    .catch(proxy.print.failure_apply_dark_mode);\n}\n\nexport const extractReaderText = () => {\n  return {\n    title: document.querySelector('.reader-title h1').value,\n    link: document.querySelector('.reader-domain a').href,\n    readerTime: document.querySelector('.reader-estimated-time').value,\n    contentBody: document.querySelectorAll('.page')\n  };\n}\n\n\n// ----- Element Select\n\nexport const startElementTracking = () => {\n  // Document.elementFromPoint()\n}\nexport const stopElementTracking = () => {};\n\n// ---- Extractive\n\nexport const captureScrollPosition = (options = {}) =>\n  Promise.resolve(options)\n    .then(() => {\n      const { document } = options;\n      if (!document) {\n        document = window.document;\n      }\n\n      const currentScrollPosition = document.documentElement.scrollTop || document.body.scrollTop;\n      const totalScrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n      return {\n        currentScrollPosition,\n        totalScrollHeight\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error capturing scroll position:\", error);\n      throw error;\n    });\n\n\n// ----- Media Control\n\nexport const getPlayable = () => {\n  return Promise.resolve(['video', 'audio'])\n    .then((types) => {\n      return types.reduce((_out, _type) => {\n        return [\n          ..._out,\n          ...Array.from(\n            document.querySelectorAll(_type))\n              .filter((el) => isElementVisible(el))\n        ];\n      }, []);\n    })\n    .catch(print.failure_get_playable);\n};\n\nexport const toggleLoop = () => {\n  return getPlayable()\n    .then((playing) => {\n      playing.forEach((item) => {\n        item.loop = !item.loop;\n      });\n      return playing;\n    })\n    .catch(print.failure_toggle_loop);\n}\n\nexport const playPause = () => {\n  return getPlayable().then((playing) => {\n      console.log(\"Playing and Pausing\", playing);\n      playing.forEach((item) => {\n        if (item.paused) { item.play(); }\n        else   { item.pause(); }\n      });\n      return playing;\n    })\n    .catch(print.failure_play_pause);\n};\n\n\nexport const restart = () => {\n  return getPlayable().then((playing) => {\n      console.log(\"Restarting\", playing);\n      playing.forEach((item) => {\n        item.currentTime = 0;\n      });\n      return playing;\n    })\n    .catch(print.failure_play_pause);\n};\n\nexport const getPlayingInfo = (playing) => {\n  return playing.map((obj) => {\n    return {\n      url: obj.src,\n      autoplay: obj.autoplay,\n      autopip: obj.autopictureinpicture,\n      paused: obj.paused,\n      muted: obj.muted,\n      loop: obj.loop,\n      currentTime: obj.currentTime,\n      duration: obj.duration\n    }\n  });\n}\n\nexport const renderPlayingStatus = (playing) => {\n  if (playing.length > 0) {\n    return {\n      playable: playing.map((obj) => {\n        return {\n          ...obj,\n          hasPlayable: true,\n          playing: !obj.paused,\n          loop: obj.loop,\n        }\n      }),\n      url: window.location.href\n    };\n  }\n};\n\n\n// ------ Text handling / searching\n\n/**\n * Get all the text nodes into a single array\n */\nexport const getTextNodes = () => {\n  let walker = document.createTreeWalker(document, window.NodeFilter.SHOW_TEXT, null, false);\n  let nodes = [];\n  while(node = walker.nextNode()) {\n    nodes.push(node);\n  }\n\n  return nodes;\n}\n\n/**\n * Gets all text nodes in the document, then for each match, return the\n * complete text content of nodes that contained the match.\n * If a match spanned more than one node, concatenate the textContent\n * of each node.\n */\nexport const getTextForRanges = (ranges) => {\n\n  let contexts = [];\n  let nodes = getNodes();\n\n  for (let range of ranges) {\n    let context = nodes[range.startTextNodePos].textContent;\n    let pos = range.startTextNodePos;\n    while (pos < range.endTextNodePos) {\n      pos++;\n      context += nodes[pos].textContent;\n    }\n    contexts.push(context);\n  }\n  return contexts;\n}\n\n\n\n// ------- zip page as markdown and images\n\n// First, install the zip-buffer library\n// npm install zip-buffer\n\nexport const zipImagesAndText = () => {\n\n  const imageElements = document.querySelectorAll('img');\n  const imageBuffers = [];\n\n  // Iterate over the image elements\n  imageElements.forEach((imageElement) => {\n    // Get the src attribute of the image element\n    const imageUrl = imageElement.src;\n\n    // Make a request to the image URL\n    fetch(imageUrl)\n      .then((response) => response.arrayBuffer())\n      .then((buffer) => {\n        imageBuffers.push(Buffer.from(buffer));\n      });\n  });\n\n  const zip = require('zip-buffer');\n\n  const articleElement = document.querySelector('article');\n  const markdown = turndownService.turndown(articleElement);\n\n  // When all of the image data Buffers have been collected, you can create a ZIP file in memory\n  return Promise.all(imageBuffers).then(() => {\n    // Create a ZIP file in memory using the zip-buffer library\n    return zip.create([\n      {\n        name: 'article.md',\n        data: markdown\n      },\n      ...imageBuffers.map((buffer, index) => ({\n        name: `image-${index}.jpg`,\n        data: buffer\n      }))\n    ]);\n  }).catch(proxy.print.failure_zip_images_and_text);\n}\n\n// ------ Dark Mode attempt 1\n\n// Define a function to detect the primary color CSS selectors in the document\nexport const detectPrimaryColorSelectors = () => {\n  // Initialize an array to store the detected selectors\n  const selectors = [];\n\n  // Iterate over all the elements in the document\n  for (const element of document.querySelectorAll(\"*\")) {\n    // Get the computed style of the element\n    const style = getComputedStyle(element);\n\n    // Check if the element has a background-color or color property that is not \"transparent\" or \"inherit\"\n    if (style.backgroundColor !== \"transparent\" && style.color !== \"inherit\") {\n      // If so, add the element's tag name and class list to the array of selectors\n      selectors.push(element.tagName + (element.classList.length > 0 ? \".\" + [...element.classList].join(\".\") : \"\"));\n    }\n  }\n\n  // Return the array of detected selectors\n  return selectors;\n}\n\n\n// Promise.resolve()\n// .then(() => {\n//     return window.getSelection().toString();\n// })\n// .then((selectedText) => {\n//     contextMenu.config.forEach(menu => {\n//         browser.contextMenus.create(menu);\n//     });\n// })\n// .then(() => {\n//     console.log(\"Context menu items created successfully\");\n// })\n// .catch((error) => {\n//     console.error(`Error creating context menu items: ${error}`);\n// });\n","// This file is actionsed into and runs this code in the browser tab.\n\nimport * as proxy from \"./lib/apis/proxy.js\";\nimport * as actions from \"./lib/actions.js\";\nimport * as content from \"./lib/content.js\";\nimport * as send from \"./lib/send.js\";\nproxy.print.load_elos_connect_content_actions();\n\n// ----- Util\n\nconst isElementVisible = (element) => {\n  let visible = element.offsetWidth ||\n    element.offsetHeight ||\n    element.getClientRects().length > 0;\n  console.log(\"testing element visibility:\", visible, element);\n  return visible;\n}\n\nconst handleMediaMessage = (obj, sendResponse) => {\n  return Promise.resolve(obj)\n    .then(obj => ({ \n      ...obj,\n      message: obj.request.message, \n      tabId: obj.sender.tab.id, \n      tab: obj.sender.tab \n    }))\n    .then(send.toContent)\n    .then(content.getPlayingInfo)\n    .then(content.renderPlayingStatus)\n    .then(sendResponse)\n    .catch(proxy.print.failure_handle_media_message)  \n}\n\nconst handleMessage = (request, sender, sendResponse) => {\n  console.log(\"[CONTENT] Message from the page script:\", request, sender, sendResponse);\n\n  const obj = { request, sender, sendResponse };\n\n  if ('media' in request.message) {\n    return handleMediaMessage(obj, sendResponse);\n\n  } else if (request.message === \"set.darkMode\") {\n    return Promise.resolve(content.elementHexMap) // chesterish\n      .then(actions.applyDarkMode)\n      .then((response) => ({\n        response: response,\n        success: true \n      }))\n      .then(sendResponse)\n      .catch(proxy.print.failure_handle_message_set_dark_mode)\n\n  } else if (message.action === \"set.readerMode\") {\n    return Promise.resolve()\n      .then(zipImagesAndText)\n      .then((zipBuffer) => ({\n        data: zipBuffer,\n        success: true,\n      }))\n      .then(sendResponse)\n      .catch(proxy.print.failure_zip_images_and_text);\n\n  } else if (request.message === 'action.find') {\n    return Promise.resolve(request)\n      .then(content.getTextForRanges)\n      .then(proxy.print.status_find)\n      .then((findObj) => {\n        return findObj;\n      })\n      .then(sendResponse)\n      .catch(proxy.print.failure_handle_message_find);\n\n  } else if (request.message = \"action.extractReaderText\") {\n    return extractReaderText()\n      .then(sendResponse)\n      .catch(proxy.print.failure_handle_message_extract_reader_text);\n  }\n}\n\ntry {\n  proxy.print.success_content_actions_js_mounted();\n  browser.runtime.onMessage.addListener(handleMessage);\n  console.log(\"content_actions.js finished mounting\")\n} catch (e) {\n  console.log(\"Caught content_actions.js init error\", e);\n};\n"],"names":["bookmarks.search","proxy.print","send.setDarkMode","send.toContent","content.getPlayingInfo","content.renderPlayingStatus","content.elementHexMap","actions.applyDarkMode","content.getTextForRanges"],"mappings":"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"}